# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProjectUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user: int=None, project: int=None, is_mentor: bool=None):  # noqa: E501
        """ProjectUser - a model defined in Swagger

        :param user: The user of this ProjectUser.  # noqa: E501
        :type user: int
        :param project: The project of this ProjectUser.  # noqa: E501
        :type project: int
        :param is_mentor: The is_mentor of this ProjectUser.  # noqa: E501
        :type is_mentor: bool
        """
        self.swagger_types = {
            'user': int,
            'project': int,
            'is_mentor': bool
        }

        self.attribute_map = {
            'user': 'user',
            'project': 'project',
            'is_mentor': 'is_mentor'
        }

        self._user = user
        self._project = project
        self._is_mentor = is_mentor

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectUser of this ProjectUser.  # noqa: E501
        :rtype: ProjectUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self) -> int:
        """Gets the user of this ProjectUser.

        Mentee/Mentor ID  # noqa: E501

        :return: The user of this ProjectUser.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user: int):
        """Sets the user of this ProjectUser.

        Mentee/Mentor ID  # noqa: E501

        :param user: The user of this ProjectUser.
        :type user: int
        """

        self._user = user

    @property
    def project(self) -> int:
        """Gets the project of this ProjectUser.

        Project ID  # noqa: E501

        :return: The project of this ProjectUser.
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project: int):
        """Sets the project of this ProjectUser.

        Project ID  # noqa: E501

        :param project: The project of this ProjectUser.
        :type project: int
        """

        self._project = project

    @property
    def is_mentor(self) -> bool:
        """Gets the is_mentor of this ProjectUser.

        Denotes whether the user is a mentor or a mentee  # noqa: E501

        :return: The is_mentor of this ProjectUser.
        :rtype: bool
        """
        return self._is_mentor

    @is_mentor.setter
    def is_mentor(self, is_mentor: bool):
        """Sets the is_mentor of this ProjectUser.

        Denotes whether the user is a mentor or a mentee  # noqa: E501

        :param is_mentor: The is_mentor of this ProjectUser.
        :type is_mentor: bool
        """

        self._is_mentor = is_mentor
